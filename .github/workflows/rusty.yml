name: Cross-platform Release

on:
  push:
    branches:
      - "*" 

jobs:
  release:
    name: Release - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: FreeBSD-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-freebsd

          - os-name: Linux-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl

          - os-name: Linux-aarch64
            runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-musl

          

          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc

          - os-name: macOS-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin

          # more targets here ...

    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install OpenSSL (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev musl-tools
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install openssl
      - name: Install OpenSSL (FreeBSD)
        if: runner.os == 'FreeBSD'
        run: |
          sudo pkg update
          sudo pkg install -y openssl
      # For Windows, OpenSSL is often handled by vcpkg or pre-installed.
      # If you encounter issues, you might need to add a specific step here.
      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          # Install vcpkg if not already present
          if (-not (Test-Path "$env:VCPKG_ROOT")) {
            git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
            cd $env:VCPKG_ROOT
            cmd.exe /c "bootstrap-vcpkg.bat"
            cd - # Go back to the original directory
          }
          # Install openssl
          cd $env:VCPKG_ROOT
          cmd.exe /c "vcpkg.exe install openssl:x64-windows-static-md"
          cd - # Go back to the original directory
      - name: Build OpenSSL for musl (Linux)
        if: runner.os == 'Linux' && contains(matrix.platform.target, 'musl')
        run: |
          OPENSSL_VERSION="1.1.1w"
          OPENSSL_DIR_NAME="openssl-${OPENSSL_VERSION}"
          OPENSSL_TAR_GZ="${OPENSSL_DIR_NAME}.tar.gz"
          OPENSSL_URL="https://www.openssl.org/source/${OPENSSL_TAR_GZ}"
          OPENSSL_INSTALL_DIR="${{ runner.temp }}/openssl-musl"

          sudo apt-get update
          sudo apt-get install -y perl make gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu

          mkdir -p "${OPENSSL_INSTALL_DIR}"
          curl -sL "${OPENSSL_URL}" -o "${OPENSSL_TAR_GZ}"
          tar -xzf "${OPENSSL_TAR_GZ}"
          cd "${OPENSSL_DIR_NAME}"

          if [ "${{ matrix.platform.target }}" = "x86_64-unknown-linux-musl" ]; then
            ./Configure linux-x86_64 -no-shared no-zlib --prefix="${OPENSSL_INSTALL_DIR}"
          elif [ "${{ matrix.platform.target }}" = "aarch64-unknown-linux-musl" ]; then
            ./Configure linux-aarch64 -no-shared no-zlib --prefix="${OPENSSL_INSTALL_DIR}"
          fi

          make -j$(nproc)
          make install_sw

          echo "OPENSSL_DIR=${OPENSSL_INSTALL_DIR}" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${OPENSSL_INSTALL_DIR}/lib/pkgconfig" >> $GITHUB_ENV
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
        env:
          OPENSSL_STATIC: 1
          PKG_CONFIG_ALLOW_CROSS: 1
      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: ubi
          target: ${{ matrix.platform.target }}
